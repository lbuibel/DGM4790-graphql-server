let idArg,queryType,stringArg;_bda‍.x([["Query",()=>Query]]);_bda‍.w("nexus",[["idArg",["idArg"],function(v){idArg=v}],["queryType",["queryType"],function(v){queryType=v}],["stringArg",["stringArg"],function(v){stringArg=v}]]);

       const Query = queryType({
  definition(t) {
    t.field('Route', {
      type: 'Route',
      nullable: true,
      args: { id: idArg() },
      resolve: (parent, { id }, ctx) => {
        return ctx.prisma.route.findOne({
          where: {
            id,
          },
        })
      }
    })

    t.list.field('Routes', {
      type: 'Route',
      args: {
        searchString: stringArg({ nullable: true}),
      },
      resolve: (parent, { searchString }, ctx) => {
        return ctx.prisma.route.findMany({
          where: {
            OR: [
              { name: { contains: searchString }},
              { description: { contains: searchString }}
            ],
          },
        })
      }
    })

  }
})