import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
} from './runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Query Engine version: latest
 */

/**
 * Utility Types
 */

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;
export declare type MergeTruthyValues<R extends object, S extends object> = {
  [key in keyof S | keyof R]: key extends false ? never : key extends keyof S ? S[key] extends false ? never : S[key] : key extends keyof R ? R[key] : never;
};
export declare type CleanupNever<T> = {
  [key in keyof T]: T[key] extends never ? never : key;
}[keyof T];
/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string, collectTimestamps?: any): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/


export type Datasources = {
  db?: string
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  datasources?: Datasources

  /**
   * @default "pretty"
   */
  errorFormat?: ErrorFormat

  log?: Array<LogLevel | LogDefinition>

  /**
   * You probably don't want to use this. `__internal` is used by internal tooling.
   */
  __internal?: {
    debug?: boolean
    hooks?: Hooks
    engine?: {
      cwd?: string
      binaryPath?: string
    }
    measurePerformance?: boolean
  }
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]>

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Routes
 * const routes = await prisma.route.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
 */
export declare class PrismaClient<T extends PrismaClientOptions = {}, U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Routes
   * const routes = await prisma.route.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
   */
  constructor(optionsArg?: T);
  on<V extends U>(eventType: V, callback: V extends never ? never : (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  connect(): Promise<void>;
  /**
   * @private
   */
  private runDisconnect;
  /**
   * Disconnect from the database
   */
  disconnect(): Promise<any>;
  /**
   * Makes a raw query
   * @example
   * ```
   * // Fetch all entries from the `User` table
   * const result = await prisma.raw`SELECT * FROM User;`
   * // Or
   * const result = await prisma.raw('SELECT * FROM User;')
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  raw<T = any>(query: string | TemplateStringsArray): Promise<T>;

  /**
   * `prisma.route`: Exposes CRUD operations for the **Route** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Routes
    * const routes = await prisma.route.findMany()
    * ```
    */
  get route(): RouteDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const OrderByArg: {
  asc: 'asc',
  desc: 'desc'
};

export declare type OrderByArg = (typeof OrderByArg)[keyof typeof OrderByArg]



/**
 * Model Route
 */

export type Route = {
  id: string
  createdAt: Date
  updatedAt: Date
  name: string
  type: string
  miles: number
  startPoint: string
  endPoint: string
  startingElevation: number
  finalElevation: number
}

export type RouteScalars = 'id' | 'createdAt' | 'updatedAt' | 'name' | 'type' | 'miles' | 'startPoint' | 'endPoint' | 'startingElevation' | 'finalElevation'
  

export type RouteSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  name?: boolean
  type?: boolean
  miles?: boolean
  startPoint?: boolean
  endPoint?: boolean
  startingElevation?: boolean
  finalElevation?: boolean
}

export type RouteInclude = {

}

type RouteDefault = {
  id: true
  createdAt: true
  updatedAt: true
  name: true
  type: true
  miles: true
  startPoint: true
  endPoint: true
  startingElevation: true
  finalElevation: true
}


export type RouteGetSelectPayload<S extends boolean | RouteSelect> = S extends true
  ? Route
  : S extends RouteSelect
  ? {
      [P in CleanupNever<MergeTruthyValues<{}, S>>]: P extends RouteScalars
        ? Route[P]
        : never
    }
   : never

export type RouteGetIncludePayload<S extends boolean | RouteInclude> = S extends true
  ? Route
  : S extends RouteInclude
  ? {
      [P in CleanupNever<MergeTruthyValues<RouteDefault, S>>]: P extends RouteScalars
        ? Route[P]
        : never
    }
   : never

export interface RouteDelegate {
  /**
   * Find zero or one Route.
   * @param {FindOneRouteArgs} args - Arguments to find a Route
   * @example
   * // Get one Route
   * const route = await prisma.route.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneRouteArgs>(
    args: Subset<T, FindOneRouteArgs>
  ): T extends FindOneRouteArgsRequired ? 'Please either choose `select` or `include`' : T extends FindOneRouteSelectArgs ? Promise<RouteGetSelectPayload<ExtractFindOneRouteSelectArgs<T>> | null>
  : T extends FindOneRouteIncludeArgs ? Promise<RouteGetIncludePayload<ExtractFindOneRouteIncludeArgs<T>> | null> : RouteClient<Route | null>
  /**
   * Find zero or more Routes.
   * @param {FindManyRouteArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Routes
   * const routes = await prisma.route.findMany()
   * 
   * // Get first 10 Routes
   * const routes = await prisma.route.findMany({ first: 10 })
   * 
   * // Only select the `id`
   * const routeWithIdOnly = await prisma.route.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyRouteArgs>(
    args?: Subset<T, FindManyRouteArgs>
  ): T extends FindManyRouteArgsRequired ? 'Please either choose `select` or `include`' : T extends FindManyRouteSelectArgs
  ? Promise<Array<RouteGetSelectPayload<ExtractFindManyRouteSelectArgs<T>>>> : T extends FindManyRouteIncludeArgs
  ? Promise<Array<RouteGetIncludePayload<ExtractFindManyRouteIncludeArgs<T>>>> : Promise<Array<Route>>
  /**
   * Create a Route.
   * @param {RouteCreateArgs} args - Arguments to create a Route.
   * @example
   * // Create one Route
   * const user = await prisma.route.create({
   *   data: {
   *     // ... data to create a Route
   *   }
   * })
   * 
  **/
  create<T extends RouteCreateArgs>(
    args: Subset<T, RouteCreateArgs>
  ): T extends RouteCreateArgsRequired ? 'Please either choose `select` or `include`' : T extends RouteSelectCreateArgs ? Promise<RouteGetSelectPayload<ExtractRouteSelectCreateArgs<T>>>
  : T extends RouteIncludeCreateArgs ? Promise<RouteGetIncludePayload<ExtractRouteIncludeCreateArgs<T>>> : RouteClient<Route>
  /**
   * Delete a Route.
   * @param {RouteDeleteArgs} args - Arguments to delete one Route.
   * @example
   * // Delete one Route
   * const user = await prisma.route.delete({
   *   where: {
   *     // ... filter to delete one Route
   *   }
   * })
   * 
  **/
  delete<T extends RouteDeleteArgs>(
    args: Subset<T, RouteDeleteArgs>
  ): T extends RouteDeleteArgsRequired ? 'Please either choose `select` or `include`' : T extends RouteSelectDeleteArgs ? Promise<RouteGetSelectPayload<ExtractRouteSelectDeleteArgs<T>>>
  : T extends RouteIncludeDeleteArgs ? Promise<RouteGetIncludePayload<ExtractRouteIncludeDeleteArgs<T>>> : RouteClient<Route>
  /**
   * Update one Route.
   * @param {RouteUpdateArgs} args - Arguments to update one Route.
   * @example
   * // Update one Route
   * const route = await prisma.route.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  update<T extends RouteUpdateArgs>(
    args: Subset<T, RouteUpdateArgs>
  ): T extends RouteUpdateArgsRequired ? 'Please either choose `select` or `include`' : T extends RouteSelectUpdateArgs ? Promise<RouteGetSelectPayload<ExtractRouteSelectUpdateArgs<T>>>
  : T extends RouteIncludeUpdateArgs ? Promise<RouteGetIncludePayload<ExtractRouteIncludeUpdateArgs<T>>> : RouteClient<Route>
  /**
   * Delete zero or more Routes.
   * @param {RouteDeleteManyArgs} args - Arguments to filter Routes to delete.
   * @example
   * // Delete a few Routes
   * const { count } = await prisma.route.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends RouteDeleteManyArgs>(
    args: Subset<T, RouteDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Routes.
   * @param {RouteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Routes
   * const route = await prisma.route.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  updateMany<T extends RouteUpdateManyArgs>(
    args: Subset<T, RouteUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Route.
   * @param {RouteUpsertArgs} args - Arguments to update or create a Route.
   * @example
   * // Update or create a Route
   * const route = await prisma.route.upsert({
   *   create: {
   *     // ... data to create a Route
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Route we want to update
   *   }
   * })
  **/
  upsert<T extends RouteUpsertArgs>(
    args: Subset<T, RouteUpsertArgs>
  ): T extends RouteUpsertArgsRequired ? 'Please either choose `select` or `include`' : T extends RouteSelectUpsertArgs ? Promise<RouteGetSelectPayload<ExtractRouteSelectUpsertArgs<T>>>
  : T extends RouteIncludeUpsertArgs ? Promise<RouteGetIncludePayload<ExtractRouteIncludeUpsertArgs<T>>> : RouteClient<Route>
  /**
   * 
   */
  count(): Promise<number>
}

export declare class RouteClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Route findOne
 */
export type FindOneRouteArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * Filter, which Route to fetch.
  **/
  where: RouteWhereUniqueInput
}

export type FindOneRouteArgsRequired = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * Filter, which Route to fetch.
  **/
  where: RouteWhereUniqueInput
}

export type FindOneRouteSelectArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * Filter, which Route to fetch.
  **/
  where: RouteWhereUniqueInput
}

export type FindOneRouteSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * Filter, which Route to fetch.
  **/
  where: RouteWhereUniqueInput
}

export type FindOneRouteIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * Filter, which Route to fetch.
  **/
  where: RouteWhereUniqueInput
}

export type FindOneRouteIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * Filter, which Route to fetch.
  **/
  where: RouteWhereUniqueInput
}

export type ExtractFindOneRouteSelectArgs<S extends undefined | boolean | FindOneRouteSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOneRouteSelectArgs
  ? S['select']
  : true

export type ExtractFindOneRouteIncludeArgs<S extends undefined | boolean | FindOneRouteIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOneRouteIncludeArgs
  ? S['include']
  : true



/**
 * Route findMany
 */
export type FindManyRouteArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * Filter, which Routes to fetch.
  **/
  where?: RouteWhereInput | null
  /**
   * Determine the order of the Routes to fetch.
  **/
  orderBy?: RouteOrderByInput | null
  /**
   * Skip the first `n` Routes.
  **/
  skip?: number | null
  /**
   * Get all Routes that come after the Route you provide with the current order.
  **/
  after?: RouteWhereUniqueInput | null
  /**
   * Get all Routes that come before the Route you provide with the current order.
  **/
  before?: RouteWhereUniqueInput | null
  /**
   * Get the first `n` Routes.
  **/
  first?: number | null
  /**
   * Get the last `n` Routes.
  **/
  last?: number | null
}

export type FindManyRouteArgsRequired = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * Filter, which Routes to fetch.
  **/
  where?: RouteWhereInput | null
  /**
   * Determine the order of the Routes to fetch.
  **/
  orderBy?: RouteOrderByInput | null
  /**
   * Skip the first `n` Routes.
  **/
  skip?: number | null
  /**
   * Get all Routes that come after the Route you provide with the current order.
  **/
  after?: RouteWhereUniqueInput | null
  /**
   * Get all Routes that come before the Route you provide with the current order.
  **/
  before?: RouteWhereUniqueInput | null
  /**
   * Get the first `n` Routes.
  **/
  first?: number | null
  /**
   * Get the last `n` Routes.
  **/
  last?: number | null
}

export type FindManyRouteSelectArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * Filter, which Routes to fetch.
  **/
  where?: RouteWhereInput | null
  /**
   * Determine the order of the Routes to fetch.
  **/
  orderBy?: RouteOrderByInput | null
  /**
   * Skip the first `n` Routes.
  **/
  skip?: number | null
  /**
   * Get all Routes that come after the Route you provide with the current order.
  **/
  after?: RouteWhereUniqueInput | null
  /**
   * Get all Routes that come before the Route you provide with the current order.
  **/
  before?: RouteWhereUniqueInput | null
  /**
   * Get the first `n` Routes.
  **/
  first?: number | null
  /**
   * Get the last `n` Routes.
  **/
  last?: number | null
}

export type FindManyRouteSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * Filter, which Routes to fetch.
  **/
  where?: RouteWhereInput | null
  /**
   * Determine the order of the Routes to fetch.
  **/
  orderBy?: RouteOrderByInput | null
  /**
   * Skip the first `n` Routes.
  **/
  skip?: number | null
  /**
   * Get all Routes that come after the Route you provide with the current order.
  **/
  after?: RouteWhereUniqueInput | null
  /**
   * Get all Routes that come before the Route you provide with the current order.
  **/
  before?: RouteWhereUniqueInput | null
  /**
   * Get the first `n` Routes.
  **/
  first?: number | null
  /**
   * Get the last `n` Routes.
  **/
  last?: number | null
}

export type FindManyRouteIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * Filter, which Routes to fetch.
  **/
  where?: RouteWhereInput | null
  /**
   * Determine the order of the Routes to fetch.
  **/
  orderBy?: RouteOrderByInput | null
  /**
   * Skip the first `n` Routes.
  **/
  skip?: number | null
  /**
   * Get all Routes that come after the Route you provide with the current order.
  **/
  after?: RouteWhereUniqueInput | null
  /**
   * Get all Routes that come before the Route you provide with the current order.
  **/
  before?: RouteWhereUniqueInput | null
  /**
   * Get the first `n` Routes.
  **/
  first?: number | null
  /**
   * Get the last `n` Routes.
  **/
  last?: number | null
}

export type FindManyRouteIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * Filter, which Routes to fetch.
  **/
  where?: RouteWhereInput | null
  /**
   * Determine the order of the Routes to fetch.
  **/
  orderBy?: RouteOrderByInput | null
  /**
   * Skip the first `n` Routes.
  **/
  skip?: number | null
  /**
   * Get all Routes that come after the Route you provide with the current order.
  **/
  after?: RouteWhereUniqueInput | null
  /**
   * Get all Routes that come before the Route you provide with the current order.
  **/
  before?: RouteWhereUniqueInput | null
  /**
   * Get the first `n` Routes.
  **/
  first?: number | null
  /**
   * Get the last `n` Routes.
  **/
  last?: number | null
}

export type ExtractFindManyRouteSelectArgs<S extends undefined | boolean | FindManyRouteSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyRouteSelectArgs
  ? S['select']
  : true

export type ExtractFindManyRouteIncludeArgs<S extends undefined | boolean | FindManyRouteIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyRouteIncludeArgs
  ? S['include']
  : true



/**
 * Route create
 */
export type RouteCreateArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * The data needed to create a Route.
  **/
  data: RouteCreateInput
}

export type RouteCreateArgsRequired = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * The data needed to create a Route.
  **/
  data: RouteCreateInput
}

export type RouteSelectCreateArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * The data needed to create a Route.
  **/
  data: RouteCreateInput
}

export type RouteSelectCreateArgsOptional = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * The data needed to create a Route.
  **/
  data: RouteCreateInput
}

export type RouteIncludeCreateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * The data needed to create a Route.
  **/
  data: RouteCreateInput
}

export type RouteIncludeCreateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * The data needed to create a Route.
  **/
  data: RouteCreateInput
}

export type ExtractRouteSelectCreateArgs<S extends undefined | boolean | RouteSelectCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends RouteSelectCreateArgs
  ? S['select']
  : true

export type ExtractRouteIncludeCreateArgs<S extends undefined | boolean | RouteIncludeCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends RouteIncludeCreateArgs
  ? S['include']
  : true



/**
 * Route update
 */
export type RouteUpdateArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * The data needed to update a Route.
  **/
  data: RouteUpdateInput
  /**
   * Choose, which Route to update.
  **/
  where: RouteWhereUniqueInput
}

export type RouteUpdateArgsRequired = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * The data needed to update a Route.
  **/
  data: RouteUpdateInput
  /**
   * Choose, which Route to update.
  **/
  where: RouteWhereUniqueInput
}

export type RouteSelectUpdateArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * The data needed to update a Route.
  **/
  data: RouteUpdateInput
  /**
   * Choose, which Route to update.
  **/
  where: RouteWhereUniqueInput
}

export type RouteSelectUpdateArgsOptional = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * The data needed to update a Route.
  **/
  data: RouteUpdateInput
  /**
   * Choose, which Route to update.
  **/
  where: RouteWhereUniqueInput
}

export type RouteIncludeUpdateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * The data needed to update a Route.
  **/
  data: RouteUpdateInput
  /**
   * Choose, which Route to update.
  **/
  where: RouteWhereUniqueInput
}

export type RouteIncludeUpdateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * The data needed to update a Route.
  **/
  data: RouteUpdateInput
  /**
   * Choose, which Route to update.
  **/
  where: RouteWhereUniqueInput
}

export type ExtractRouteSelectUpdateArgs<S extends undefined | boolean | RouteSelectUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends RouteSelectUpdateArgs
  ? S['select']
  : true

export type ExtractRouteIncludeUpdateArgs<S extends undefined | boolean | RouteIncludeUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends RouteIncludeUpdateArgs
  ? S['include']
  : true



/**
 * Route updateMany
 */
export type RouteUpdateManyArgs = {
  data: RouteUpdateManyMutationInput
  where?: RouteWhereInput | null
}


/**
 * Route upsert
 */
export type RouteUpsertArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * The filter to search for the Route to update in case it exists.
  **/
  where: RouteWhereUniqueInput
  /**
   * In case the Route found by the `where` argument doesn't exist, create a new Route with this data.
  **/
  create: RouteCreateInput
  /**
   * In case the Route was found with the provided `where` argument, update it with this data.
  **/
  update: RouteUpdateInput
}

export type RouteUpsertArgsRequired = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * The filter to search for the Route to update in case it exists.
  **/
  where: RouteWhereUniqueInput
  /**
   * In case the Route found by the `where` argument doesn't exist, create a new Route with this data.
  **/
  create: RouteCreateInput
  /**
   * In case the Route was found with the provided `where` argument, update it with this data.
  **/
  update: RouteUpdateInput
}

export type RouteSelectUpsertArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * The filter to search for the Route to update in case it exists.
  **/
  where: RouteWhereUniqueInput
  /**
   * In case the Route found by the `where` argument doesn't exist, create a new Route with this data.
  **/
  create: RouteCreateInput
  /**
   * In case the Route was found with the provided `where` argument, update it with this data.
  **/
  update: RouteUpdateInput
}

export type RouteSelectUpsertArgsOptional = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * The filter to search for the Route to update in case it exists.
  **/
  where: RouteWhereUniqueInput
  /**
   * In case the Route found by the `where` argument doesn't exist, create a new Route with this data.
  **/
  create: RouteCreateInput
  /**
   * In case the Route was found with the provided `where` argument, update it with this data.
  **/
  update: RouteUpdateInput
}

export type RouteIncludeUpsertArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * The filter to search for the Route to update in case it exists.
  **/
  where: RouteWhereUniqueInput
  /**
   * In case the Route found by the `where` argument doesn't exist, create a new Route with this data.
  **/
  create: RouteCreateInput
  /**
   * In case the Route was found with the provided `where` argument, update it with this data.
  **/
  update: RouteUpdateInput
}

export type RouteIncludeUpsertArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * The filter to search for the Route to update in case it exists.
  **/
  where: RouteWhereUniqueInput
  /**
   * In case the Route found by the `where` argument doesn't exist, create a new Route with this data.
  **/
  create: RouteCreateInput
  /**
   * In case the Route was found with the provided `where` argument, update it with this data.
  **/
  update: RouteUpdateInput
}

export type ExtractRouteSelectUpsertArgs<S extends undefined | boolean | RouteSelectUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends RouteSelectUpsertArgs
  ? S['select']
  : true

export type ExtractRouteIncludeUpsertArgs<S extends undefined | boolean | RouteIncludeUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends RouteIncludeUpsertArgs
  ? S['include']
  : true



/**
 * Route delete
 */
export type RouteDeleteArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * Filter which Route to delete.
  **/
  where: RouteWhereUniqueInput
}

export type RouteDeleteArgsRequired = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * Filter which Route to delete.
  **/
  where: RouteWhereUniqueInput
}

export type RouteSelectDeleteArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * Filter which Route to delete.
  **/
  where: RouteWhereUniqueInput
}

export type RouteSelectDeleteArgsOptional = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * Filter which Route to delete.
  **/
  where: RouteWhereUniqueInput
}

export type RouteIncludeDeleteArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
  /**
   * Filter which Route to delete.
  **/
  where: RouteWhereUniqueInput
}

export type RouteIncludeDeleteArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
  /**
   * Filter which Route to delete.
  **/
  where: RouteWhereUniqueInput
}

export type ExtractRouteSelectDeleteArgs<S extends undefined | boolean | RouteSelectDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends RouteSelectDeleteArgs
  ? S['select']
  : true

export type ExtractRouteIncludeDeleteArgs<S extends undefined | boolean | RouteIncludeDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends RouteIncludeDeleteArgs
  ? S['include']
  : true



/**
 * Route deleteMany
 */
export type RouteDeleteManyArgs = {
  where?: RouteWhereInput | null
}


/**
 * Route without action
 */
export type RouteArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
}

export type RouteArgsRequired = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
}

export type RouteSelectArgs = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select: RouteSelect
}

export type RouteSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Route
  **/
  select?: RouteSelect | null
}

export type RouteIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: RouteInclude
}

export type RouteIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: RouteInclude | null
}

export type ExtractRouteSelectArgs<S extends undefined | boolean | RouteSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends RouteSelectArgs
  ? S['select']
  : true

export type ExtractRouteIncludeArgs<S extends undefined | boolean | RouteIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends RouteIncludeArgs
  ? S['include']
  : true




/**
 * Deep Input Types
 */


export type RouteWhereInput = {
  id?: string | StringFilter | null
  createdAt?: Date | string | DateTimeFilter | null
  updatedAt?: Date | string | DateTimeFilter | null
  name?: string | StringFilter | null
  type?: string | StringFilter | null
  miles?: number | FloatFilter | null
  startPoint?: string | StringFilter | null
  endPoint?: string | StringFilter | null
  startingElevation?: number | IntFilter | null
  finalElevation?: number | IntFilter | null
  AND?: Enumerable<RouteWhereInput> | null
  OR?: Enumerable<RouteWhereInput> | null
  NOT?: Enumerable<RouteWhereInput> | null
}

export type RouteWhereUniqueInput = {
  id?: string | null
}

export type RouteCreateInput = {
  id?: string | null
  createdAt?: Date | string | null
  updatedAt?: Date | string | null
  name: string
  type: string
  miles: number
  startPoint: string
  endPoint: string
  startingElevation: number
  finalElevation: number
}

export type RouteUpdateInput = {
  id?: string | null
  createdAt?: Date | string | null
  updatedAt?: Date | string | null
  name?: string | null
  type?: string | null
  miles?: number | null
  startPoint?: string | null
  endPoint?: string | null
  startingElevation?: number | null
  finalElevation?: number | null
}

export type RouteUpdateManyMutationInput = {
  id?: string | null
  createdAt?: Date | string | null
  updatedAt?: Date | string | null
  name?: string | null
  type?: string | null
  miles?: number | null
  startPoint?: string | null
  endPoint?: string | null
  startingElevation?: number | null
  finalElevation?: number | null
}

export type StringFilter = {
  equals?: string | null
  not?: string | StringFilter | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
}

export type DateTimeFilter = {
  equals?: Date | string | null
  not?: Date | string | DateTimeFilter | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
}

export type FloatFilter = {
  equals?: number | null
  not?: number | FloatFilter | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
}

export type IntFilter = {
  equals?: number | null
  not?: number | IntFilter | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
}

export type RouteOrderByInput = {
  id?: OrderByArg | null
  createdAt?: OrderByArg | null
  updatedAt?: OrderByArg | null
  name?: OrderByArg | null
  type?: OrderByArg | null
  miles?: OrderByArg | null
  startPoint?: OrderByArg | null
  endPoint?: OrderByArg | null
  startingElevation?: OrderByArg | null
  finalElevation?: OrderByArg | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
